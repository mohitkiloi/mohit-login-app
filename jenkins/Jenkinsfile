pipeline {
    agent any

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/mohitkiloi/mohit-login-app.git'
            }
        }

        stage('Setup Python Env') {
            steps {
                bat '"C:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python312\\python.exe" -m venv venv'
                bat '.\\venv\\Scripts\\pip.exe install -r requirements.txt'
            }
        }

        // Optional: If you want Jenkins to auto-generate input.json
        stage('Generate input.json') {
            steps {
                writeFile file: 'opa/input.json', text: '''{
  "input": {
    "branch": "main",
    "approved": true,
    "role": "admin"
  }
}'''
            }
        }

        stage('Generate Logs') {
            steps {
                bat '.\\venv\\Scripts\\python.exe generate_fake_logs.py'
            }
        }

        stage('Policy Check with OPA') {
            steps {
                bat 'opa.exe eval --data opa/ --input opa/input.json "data.pipeline.allow" > pipeline_result.json'
                bat 'opa.exe eval --data opa/ --input opa/input.json "data.ci_cd.policy.allow" > cicd_result.json'
                script {
                    def result1 = readFile('pipeline_result.json')
                    def result2 = readFile('cicd_result.json')

                    echo "=== PIPELINE POLICY RESULT ==="
                    echo result1
                    echo "=== CI/CD POLICY RESULT ==="
                    echo result2

                    if (!result1.contains('true') || !result2.contains('true')) {
                        error("One or more OPA policy checks failed.")
                    } else {
                        echo "Both OPA policies passed."
                    }
                }
            }
        }

        stage('Train Isolation Forest') {
            steps {
                bat '.\\venv\\Scripts\\python.exe train_model.py'
            }
        }

        stage('Detect Anomalies') {
            steps {
                bat '.\\venv\\Scripts\\python.exe detect_anomaly.py'
            }
        }

        stage('Build Login Graph') {
            steps {
                bat '.\\venv\\Scripts\\python.exe gnn\\graph_builder.py'
            }
        }

        stage('Train GNN Model') {
            steps {
                bat '.\\venv\\Scripts\\python.exe gnn\\gnn_model.py'
            }
        }

        stage('Infer with GNN') {
            steps {
                bat '.\\venv\\Scripts\\python.exe gnn\\infer_gnn.py'
            }
        }

        stage('Archive Results') {
            steps {
                archiveArtifacts artifacts: 'logs.csv, alert_report.csv, gnn_model.pth, login_graph.csv, experiments/metrics_report.json', onlyIfSuccessful: true
            }
        }
    }
}
