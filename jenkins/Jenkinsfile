pipeline {
    agent any

    stages {

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/mohitkiloi/mohit-login-app.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                bat '"C:\\Users\\Lenovo\\AppData\\Local\\Programs\\Python\\Python312\\python.exe" -m venv venv'
                bat '.\\venv\\Scripts\\pip install -r requirements.txt'
            }
        }

        stage('Generate Fake Logs') {
            steps {
                bat '.\\venv\\Scripts\\python generate_fake_logs.py'
            }
        }

        stage('OPA Policy Checks') {
            steps {
                // Run both policies from opa/policies/
                bat 'opa.exe eval --format=json --data opa/policies/ --input opa/input.json "data.pipeline_policy.allow" > pipeline_result.json'
                bat 'opa.exe eval --format=json --data opa/policies/ --input opa/input.json "data.ci_cd_policy.allow" > cicd_result.json'

                script {
                    def pipelineResult = readFile('pipeline_result.json')
                    def cicdResult = readFile('cicd_result.json')

                    if (!pipelineResult.contains('"value": true')) {
                        error("OPA Policy [pipeline_policy.rego] failed.")
                    }
                    if (!cicdResult.contains('"value": true')) {
                        error("OPA Policy [ci_cd_policy.rego] failed.")
                    }

                    echo "Both OPA policies passed successfully."
                }
            }
        }

        stage('Train Isolation Forest Model') {
            steps {
                bat '.\\venv\\Scripts\\python train_model.py'
            }
        }

        stage('Detect Anomalies') {
            steps {
                bat '.\\venv\\Scripts\\python detect_anomaly.py'
            }
        }

        stage('Build GNN Graph') {
            steps {
                bat '.\\venv\\Scripts\\python gnn\\graph_builder.py'
            }
        }

        stage('Train GNN Model') {
            steps {
                bat '.\\venv\\Scripts\\python gnn\\gnn_model.py'
            }
        }

        stage('GNN Inference') {
            steps {
                bat '.\\venv\\Scripts\\python gnn\\infer_gnn.py'
            }
        }

        stage('Archive Final Results') {
            steps {
                archiveArtifacts artifacts: 'logs.csv, alert_report.csv, gnn_model.pth, login_graph.csv, experiments/metrics_report.json', onlyIfSuccessful: true
            }
        }
    }
}
